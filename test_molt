#!/usr/bin/env python
# encoding: utf-8
#
# Copyright (C) 2011 Chris Jerdonek. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * The names of the copyright holders may not be used to endorse or promote
#   products derived from this software without specific prior written
#   permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

"""
Runs all unit tests and doc tests in the project.

"""

import glob
import os
import sys
import unittest


LIBRARY_PACKAGE_NAME = 'molt_lib'
TEST_MODULE_PATTERN = '*_unittest.py'


class TestLoader(unittest.TestLoader):

    """
    This TestLoader differs from unittest's default TestLoader by
    providing additional diagnostic information when an AttributeError
    occurs while loading a module.

    Because of Python issue 7559:

      http://bugs.python.org/issue7559#

    module ImportErrors are masked, along with the name of the offending
    module.  This TestLoader reports the name of the offending module
    along with a reminder that the AttributeError may be masking an
    ImportError.

    """

    def loadTestsFromNames(self, names, module=None):
        """Return a suite of all test cases found."""
        suites = []

        for name in names:
            try:
                suite = self.loadTestsFromName(name, module)
            except AttributeError as err:
                msg = """\

ERROR: AttributeError while loading unit tests from--
    %s
  Note that due to a bug in Python's unittest module, the AttributeError may
  be masking an ImportError in the module being processed.

""" % repr(name)
                sys.stderr.write(msg)
                raise
            suites.append(suite)

        return self.suiteClass(suites)


def path_to_module_name(path):
    """
    Convert a file path to a dotted module name, and return the name.

    This function assumes that the first directory in the file path
    is the first module name in the dotted module name.  In other words,
    the given path must be relative to the top-level directory in the
    package hierarchy.

    """
    root, ext = os.path.splitext(path)
    module_parts = []
    while True:
        root, tail = os.path.split(root)
        module_parts.append(tail)
        if not root:
            break
    module_parts.reverse()

    return ".".join(module_parts)


def find_test_module_names(package_name, pattern):
    """
    Return a list of the names of all unit test modules in a package.

    The package must lie inside the same directory as this file.

    """
    original_dir = os.getcwd()

    try:
        # Temporarily switch directories so that module names will be relative
        # to the current script.
        script_dir = os.path.dirname(__file__)
        os.chdir(script_dir)

        module_names = []
        for dir_path, dir_names, file_names in os.walk(package_name):
            glob_path = os.path.join(dir_path, pattern)
            for file_path in glob.glob(glob_path):
                module_name = path_to_module_name(file_path)
                module_names.append(module_name)
    finally:
        os.chdir(original_dir)

    return module_names


# TODO: add running doc tests.
def main(sys_argv):
    """Run all unit tests."""
    # Test discovery was not added to unittest until Python 2.7:
    #
    #   http://docs.python.org/library/unittest.html#test-discovery
    #
    # We use our own test discovery method here to support test discovery
    # in Python 2.6 and earlier.
    module_names = find_test_module_names(LIBRARY_PACKAGE_NAME, TEST_MODULE_PATTERN)

    # unittest.TestLoader's constructor, which is called directly by
    # unittest.main(), does not permit the defaultTest parameter to be
    # a list of test names -- only one name.  So we pass the test names
    # instead using the argv parameter.
    argv = [''] + module_names
    unittest.main(testLoader=TestLoader(), module=None, argv=argv)


if __name__ == "__main__":
    main(sys.argv)
