#!/usr/bin/env python
# encoding: utf-8
#
# Copyright (C) 2011 Chris Jerdonek. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# * The names of the copyright holders may not be used to endorse or promote
#   products derived from this software without specific prior written
#   permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

"""
A script for creating new Python projects.

"""

import logging
import sys


_log = logging.getLogger("molt")

# TODO: this should be part of the option-parsing code.
DEBUG_OPTION = "-v"


class Error(Exception):
    """Base class for exceptions in this module."""
    pass


def configure_logging(logging_level=None):
    if logging_level is None:
        logging_level = logging.INFO

    logger = logging.getLogger()  # the root logger.

    stream = sys.stderr
    handler = logging.StreamHandler(stream)
    formatter = logging.Formatter("[%(levelname)s] %(message)s")
    handler.setFormatter(formatter)

    logger.setLevel(logging_level)
    logger.addHandler(handler)

    _log.debug("Debug logging enabled.")


def do_program_body(args):
    # TODO
    print "Program body..."


def exit_with_error(message):
    """Display an error message, and exit the program."""
    # Skip to the beginning of the next line, e.g. in case we are in
    # the middle of the password prompt.
    print

    _log.error("""%s

Pass -h or --help for help documentation and available options.""" % message)
    exit(1)


def main(sys_argv):
    # TODO: follow all of the recommendations here:
    # http://www.artima.com/weblogs/viewpost.jsp?thread=4829
    args = sys_argv[1:]

    # Configure logging prior to parsing options.
    configure_logging(logging.DEBUG if DEBUG_OPTION in args else None)

    try:
        do_program_body(args)
    except KeyboardInterrupt, err:
        exit_with_error("Script aborted by user.")
    except Error, err:
        exit_with_error(err.message)


if __name__ == "__main__":
    result = main(sys.argv)

    sys.exit(result)
